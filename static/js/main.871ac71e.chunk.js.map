{"version":3,"sources":["App.js","components/Output.jsx","components/Syntax.jsx","components/Keypad.jsx","index.js"],"names":["isOperator","endsWithOperator","endsWithNegativeSign","App","props","state","initialValue","previousValue","expression","valueSign","lastClicked","MaxDig","bind","handleOperators","handleEvaluate","reset","handleDecimal","handleNumbers","this","setState","setTimeout","includes","test","slice","replace","answer","Math","round","eval","toString","evaluated","e","value","target","length","match","className","currentValue","decimal","evaluate","numbers","operators","React","Component","Output","id","Syntax","Keypad","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.871ac71e.chunk.js","sourcesContent":["import React  from 'react';\r\nimport Output from './components/Output';\r\nimport Syntax from './components/Syntax';\r\nimport Keypad from './components/Keypad';\r\nimport './App.css';\r\n\r\nconst isOperator = /[x/+‑]/,\r\n  endsWithOperator = /[x+‑/]$/,\r\n  endsWithNegativeSign = /\\d[x/+‑]{1}‑$/;\r\n \r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          initialValue: '0',\r\n          previousValue: '0',\r\n          expression: '',\r\n          valueSign: 'pos',\r\n          lastClicked: ''\r\n        };\r\n        this.MaxDig = this.MaxDig.bind(this);\r\n        this.handleOperators = this.handleOperators.bind(this);\r\n        this.handleEvaluate = this.handleEvaluate.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.handleDecimal = this.handleDecimal.bind(this);\r\n        this.handleNumbers = this.handleNumbers.bind(this);\r\n      }\r\n    \r\n      MaxDig() {\r\n        this.setState({\r\n          initialValue: 'Digit Limit Met',\r\n          previousValue: this.state.initialValue\r\n        });\r\n        setTimeout(() => this.setState({ initialValue: this.state.previousValue }), 1000);\r\n      }\r\n    \r\n      handleEvaluate() {\r\n        if (!this.state.initialValue.includes('Limit')) {\r\n          let expression = this.state.expression;\r\n          while (endsWithOperator.test(expression)) {\r\n            expression = expression.slice(0, -1);\r\n          }\r\n          expression = expression\r\n            .replace(/x/g, '*')\r\n            .replace(/‑/g, '-')\r\n            .replace('--', '+0+0+0+0+0+0+');\r\n          let answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\r\n          this.setState({\r\n            initialValue: answer.toString(),\r\n            expression:\r\n              expression\r\n                .replace(/\\*/g, '⋅')\r\n                .replace(/-/g, '‑')\r\n                .replace('+0+0+0+0+0+0+', '‑-')\r\n                .replace(/(x | \\/ | \\+)‑/, '$1-')\r\n                .replace(/^‑/, '-') +\r\n              '=' +\r\n              answer,\r\n            previousValue: answer,\r\n            evaluated: true\r\n          });\r\n        }\r\n      }\r\n    \r\n      handleOperators(e) {\r\n        if (!this.state.initialValue.includes('Limit')) {\r\n          const value = e.target.value;\r\n          const { expression, previousValue, evaluated } = this.state;\r\n          this.setState({ initialValue: value, evaluated: false });\r\n          if (evaluated ) {\r\n            this.setState({ expression: previousValue + value });\r\n          } else if (!endsWithOperator.test(expression)) {\r\n            this.setState({\r\n              previousValue: expression,\r\n              expression: expression + value\r\n            });\r\n          } else if (!endsWithNegativeSign.test(expression)) {\r\n            this.setState({\r\n              expression:\r\n                (endsWithNegativeSign.test(expression + value) ? expression : previousValue) +\r\n                value\r\n            });\r\n          } else if (value !== '‑')\r\n           {\r\n            this.setState({\r\n              expression: previousValue + value\r\n            });\r\n          }\r\n        }\r\n      }\r\n    \r\n      handleNumbers(e) {\r\n        if (!this.state.initialValue.includes('Limit')) {\r\n          const { initialValue, expression, evaluated } = this.state;\r\n          const value = e.target.value;\r\n          this.setState({ evaluated: false });\r\n          if (initialValue.length > 21) {\r\n            this.MaxDig();\r\n          } else if (evaluated) {\r\n            this.setState({\r\n              initialValue: value,\r\n              expression: value !== '0' ? value : ''\r\n            });\r\n          } else {\r\n            this.setState({\r\n              initialValue:\r\n                initialValue === '0' || isOperator.test(initialValue)\r\n                  ? value\r\n                  : initialValue + value,\r\n              expression:\r\n                initialValue === '0' && value === '0'\r\n                  ? expression === ''\r\n                    ? value\r\n                    : expression\r\n                  : /( [^.0-9]0|^0 )$/.test(expression)\r\n                  ? expression.slice(0, -1) + value\r\n                  : expression + value\r\n            });\r\n          }\r\n        }\r\n      }\r\n    \r\n      handleDecimal() {\r\n        if (this.state.evaluated === true) {\r\n          this.setState({\r\n            initialValue: '0.',\r\n            expression: '0.',\r\n            evaluated: false\r\n          });\r\n        } else if (\r\n          !this.state.initialValue.includes('.') &&\r\n          !this.state.initialValue.includes('Limit')\r\n        ) {\r\n          this.setState({ evaluated: false });\r\n          if (this.state.initialValue.length > 21) {\r\n            this.MaxDig();\r\n          } else if (\r\n            endsWithOperator.test(this.state.expression) ||\r\n            (this.state.initialValue === '0' && this.state.expression === '')\r\n          ) {\r\n            this.setState({\r\n              initialValue: '0.',\r\n              expression: this.state.expression + '0.'\r\n            });\r\n          } else {\r\n            this.setState({\r\n              initialValue: this.state.expression.match(/(-?\\d+\\.?\\d*)$/)[0] + '.',\r\n              expression: this.state.expression + '.'\r\n            });\r\n          }\r\n        }\r\n      }\r\n    \r\n      reset() {\r\n        this.setState({\r\n          initialValue: '0',\r\n          previousValue: '0',\r\n          expression: '',\r\n          valueSign: 'pos',\r\n          lastClicked: '',\r\n          evaluated: false\r\n        });\r\n      }\r\nrender(){ \r\n   return (\r\n\r\n    <div className=\"container\">\r\n      <h1>freeCodeCamp calculator</h1>\r\n        <div className=\"calculator\">\r\n       \r\n          <Syntax expression={this.state.expression.replace(/x/g, '⋅')} />\r\n          <Output currentValue={this.state.initialValue} />\r\n          <Keypad\r\n            decimal={this.handleDecimal}\r\n            evaluate={this.handleEvaluate}\r\n            reset={this.reset}\r\n            numbers={this.handleNumbers}\r\n            operators={this.handleOperators}\r\n          />\r\n          </div>\r\n          </div>\r\n        \r\n       \r\n     \r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react'\r\n\r\n class Output extends Component {\r\n    render() {\r\n      \r\n        return (\r\n            \r\n                <div className=\"outputScreen\" id=\"display\">\r\n                  {this.props.currentValue}\r\n                </div>\r\n              );\r\n            }\r\n    \r\n        }\r\nexport default Output ;","import React, { Component } from 'react'\r\n\r\nexport default class Syntax extends Component {\r\n    render() {\r\n      return <div className=\"formulaScreen\">{this.props.expression}</div>;\r\n      }\r\n}\r\n","import React  from 'react'\r\n\r\nconst Keypad = ({decimal,evaluate,reset,numbers, operators}) => {\r\n  \r\n\r\n    return (\r\n        <div className=\"container\">\r\n          <div id=\"first-row\">\r\n        <button\r\n          className=\"element\"\r\n          id=\"clear\"\r\n          onClick={reset}\r\n          value=\"AC\"\r\n        >\r\n          AC\r\n        </button>\r\n        <button\r\n          id=\"divide\"\r\n          onClick={operators}\r\n          \r\n          value=\"/\"\r\n        >\r\n          /\r\n        </button>\r\n        <button\r\n          id=\"multiply\"\r\n          onClick={operators}\r\n          value=\"x\"\r\n        >\r\n          x\r\n        </button>\r\n        </div>\r\n        <div id=\"second-row\">\r\n        <button id=\"seven\" onClick={numbers} value=\"7\">\r\n          7\r\n        </button>\r\n        <button id=\"eight\" onClick={numbers} value=\"8\">\r\n          8\r\n        </button>\r\n        <button id=\"nine\" onClick={numbers} value=\"9\">\r\n          9\r\n        </button>\r\n        <button\r\n          id=\"subtract\"\r\n          onClick={operators}\r\n          value=\"‑\"\r\n        >\r\n          ‑\r\n        </button>\r\n        </div>\r\n\r\n        <div id=\"third-row\">\r\n        <button id=\"four\" onClick={numbers} value=\"4\">\r\n          4\r\n        </button>\r\n        <button id=\"five\" onClick={numbers} value=\"5\">\r\n          5\r\n        </button>\r\n        <button id=\"six\" onClick={numbers} value=\"6\">\r\n          6\r\n        </button>\r\n        <button\r\n          id=\"add\"\r\n          onClick={operators}\r\n          value=\"+\"\r\n        >\r\n          +\r\n        </button>\r\n        </div>\r\n\r\n        <div id=\"fourth-row\">\r\n          <div id=\"fourth-row-subdiv\">\r\n          <div id=\"suvdiv1\">\r\n        <button id=\"one\" onClick={numbers} value=\"1\">\r\n          1\r\n        </button>\r\n        <button id=\"two\" onClick={numbers} value=\"2\">\r\n          2\r\n        </button>\r\n        <button id=\"three\" onClick={numbers} value=\"3\">\r\n          3\r\n        </button>\r\n        </div>\r\n        <div id=\"subdiv2\">\r\n        <button\r\n          className=\"element\"\r\n          id=\"zero\"\r\n          onClick={numbers}\r\n          value=\"0\"\r\n        >\r\n          0\r\n        </button>\r\n        <button id=\"decimal\" onClick={decimal} value=\".\">\r\n          .\r\n        </button>\r\n        </div>\r\n        </div>\r\n        <div id=\"fourth-row-equal\">\r\n        <button\r\n          id=\"equals\"\r\n          onClick={evaluate}\r\n          value=\"=\"\r\n        >\r\n          =\r\n        </button>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Keypad\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}